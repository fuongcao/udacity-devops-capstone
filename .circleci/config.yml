version: 2.1
executors:
  nodejs-executor:
  # working directory: /home/circleci/project
    docker:
      - image: cimg/node:18.16.1

  awscli-executor:
  # working directory: root/project
    docker:
      - image: amazon/aws-cli:2.12.

orbs:
  slack: circleci/slack@4.4.2
  docker: circleci/docker@2.2.0
  aws-cli: circleci/aws-cli@3.1.5
  aws-eks: circleci/aws-eks@0.2.0
  kubernetes: circleci/kubernetes@1.3.1

commands:
  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  notify_slack_fail:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

jobs:
  build-app:
    executor: nodejs-executor
    steps:
      - checkout
      - run:
          name: Add build number to .env.production
          command:
            echo "VITE_VERSION_INFO=build-${CIRCLE_WORKFLOW_ID:0:7}" > .env.production
            cat .env.production
      - run:
          name: Build 
          command: |
            echo "node:$(node --version)" && echo "npm:$(npm --version)"
            npm install
            npm run build

      - save_cache:
          paths: [node_modules]
          key: build-cache
      - save_cache:
          paths: [dist]
          key: dist-cache-${CIRCLE_WORKFLOW_ID:0:7}

  lint-test-app:
    executor: nodejs-executor
    steps:
      - checkout
      - restore_cache:
          keys: [build-cache]
      - run:
          name: Install Hadolint
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
      - run:
          name: Run Docker lint
          command: |
            hadolint Dockerfile   
      - run:
          name: Run app audit
          command: |
            echo =========== Run audit ==================================
            npm audit --audit-level=critical
      - run:
          name: Run app lint check
          command: |   
            echo =========== Run Lint ==================================
            npm run lint
      - run:
          name: Run app Test
          command: |   
            echo =========== Run Test ==================================
            npm run test

  build-docker:
    executor: docker/docker
    # /home/circleci/project
    environment:
      DOCKER_IMAGE: devops-capstone
      DOCKER_TAG: build-${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          keys: dist-cache-${CIRCLE_WORKFLOW_ID:0:7}
      - docker/check:
          docker-username: DOCKER_USER
          docker-password: DOCKER_PASSWORD

      - docker/build:
          image: $DOCKER_USER/$DOCKER_IMAGE
          tag: $DOCKER_TAG

      - docker/push:
          digest-path: /tmp/digest.txt
          image: $DOCKER_USER/$DOCKER_IMAGE
          tag: $DOCKER_TAG

      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"

  deploy-eks:
    docker:
      - image: cimg/base:stable
      # /home/circleci/project
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      docker-image-tag:
        description: |
          Name of the docker image to be deployed
        type: string
      version-info:
        description: |
          App version information
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: "us-east-1"
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run:
          name: "Install AWS CLI"
          command: |
            ls -la
            if aws --version | grep "aws-cli/" > /dev/null
            then
              echo "AWS CLI is already installed, skipping installation."
              exit 0
            fi
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: "Update kubeconfig"
          command: |
            echo $(kubectl version)
            echo $(aws --version)
            echo $(aws eks update-kubeconfig --region << parameters.aws-region >> --name << parameters.cluster-name >>)
            kubectl get pods

      - run:       
          name: Find Production
          command: |
            mkdir -p /home/circleci/workspace
            ProdDNS=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`clusterDNS\`].Value" \
                      --no-paginate --output text)
            echo ProdDNS:$ProdDNS

            BlueDNS=$(kubectl get service blue-svc | awk '{print $4}' | tail -n1)
            echo BlueDNS:$BlueDNS

            GreenDNS=$(kubectl get service green-svc | awk '{print $4}' | tail -n1)
            echo GreenDNS:$GreenDNS
            
            if [[ "$BlueDNS" = "$ProdDNS" ]]
            then
              PREFIX=green
              NProdDNS=$GreenDNS
            fi
            if [[ "$GreenDNS" = "$ProdDNS" ]]
            then
              PREFIX=blue
              NProdDNS=$BlueDNS
            fi
            if [[ -z $PREFIX ]]
            then
              echo "Cannot find matching DNS!"
              return 0
            fi
            echo ProdDNS:$ProdDNS
            echo NProdDNS:$NProdDNS
            echo PREFIX:$PREFIX
            echo "export ProdDNS=$ProdDNS" >> "$BASH_ENV"
            echo "export NProdDNS=$NProdDNS" >> "$BASH_ENV"
            echo "export PREFIX=$PREFIX" >> "$BASH_ENV"
            echo $NProdDNS > /home/circleci/workspace/nprod_dns
            cat /home/circleci/workspace/nprod_dns
            
      - run:      
          name: Create deployment manifest
          command: |
            # Replace the placeholders in the manifest with the intended values.
            # This is to avoid hardcoding the image name in the manifest, to make this
            # demo project more portable.
            BUILD_DATE=$(date '+%Y%m%d%H%M%S')
            echo $PREFIX-deploy
            cat deployment/$PREFIX-deployment.yml.template |\
               sed "s|DOCKER_IMAGE_TAG|<< parameters.docker-image-tag >>|\
               g;s|BUILD_DATE_VALUE|$BUILD_DATE|g;s|VERSION_INFO_VALUE|<< parameters.version-info >>|\
               g" > deployment/app-deployment.yml

            cat deployment/app-deployment.yml
          
      - run: 
          name: Update deployment
          command: |
            kubectl apply -f deployment/app-deployment.yml

      - run: 
          name: Update services
          command: |
            kubectl apply -f deployment/$PREFIX-svc.yml

      - persist_to_workspace:
          root: /home/circleci/workspace
          paths:
            - nprod_dns


  smoke-test:
    docker:
      - image: cimg/base:stable
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: "us-east-1"
    steps:
      - attach_workspace:
          at: /home/circleci/workspace
      - checkout
      - kubernetes/install-kubectl
      - run:
          name: "Install AWS CLI"
          command: |
            ls -la
            if aws --version | grep "aws-cli/" > /dev/null
            then
              echo "AWS CLI is already installed, skipping installation."
              exit 0
            fi
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: "Update kubeconfig"
          command: |
            echo $(kubectl version)
            echo $(aws --version)
            echo $(aws eks update-kubeconfig --region << parameters.aws-region >> --name << parameters.cluster-name >>)
            kubectl get pods
      - run:
          name: Run Smoke to Green environment
          command: |
            NPROD_DNS=$(cat /home/circleci/workspace/nprod_dns)
            echo "NPROD_DNS:$NPROD_DNS"
            kubectl get pods
            kubectl get services
            curl -s "http://$NPROD_DNS" | grep "Vite + React"

  promote_production:
    executor: awscli-executor
    steps:
      - attach_workspace:
          at: /root/workspace 
      - checkout
      - run:
          name: Routing traffic
          command: |
            NPROD_DNS=$(cat /home/circleci/workspace/nprod_dns)
            echo "NPROD_DNS:$NPROD_DNS"
            aws cloudformation deploy \
              --template-file deployment/stack/cloudfront.yml \
              --stack-name "BlueGreenStack" \
              --parameter-overrides clusterDNS=$NPROD_DNS
              --tags project=udapeople Name=BlueGreen

workflows:
  default:
    jobs:
      - build-app:
          context: slack-secrets
      - lint-test-app:
          context: slack-secrets
          requires: [build-app]
      - build-docker:
          context: slack-secrets
          requires: [lint-test-app]
      - deploy-eks:
          cluster-name: devops-capstone
          aws-region: $AWS_DEFAULT_REGION
          docker-image-tag:  "build-${CIRCLE_WORKFLOW_ID:0:7}"
          version-info: "build-${CIRCLE_WORKFLOW_ID:0:7}"
          requires: [build-docker]
      - smoke-test:
          cluster-name: devops-capstone
          aws-region: $AWS_DEFAULT_REGION
          requires: [deploy-eks]
          

