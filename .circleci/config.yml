version: 2.1
executors:
  nodejs-executor:
  # working directory: /home/circleci/project
    docker:
      - image: cimg/node:18.16.1

  awscli-executor:
  # working directory: root/project
    docker:
      - image: amazon/aws-cli:2.12.

orbs:
  slack: circleci/slack@4.4.2
  docker: circleci/docker@2.2.0
  aws-cli: circleci/aws-cli@3.1.5
  aws-eks: circleci/aws-eks@0.2.0
  kubernetes: circleci/kubernetes@1.3.1

commands:
  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  notify_slack_fail:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

jobs:
  build-app:
    executor: nodejs-executor
    steps:
      - checkout
      - restore_cache:
          keys: [build-cache, dist-cache]
      - run:
          name: Build 
          command: |
            echo "node:$(node --version)" && echo "npm:$(npm --version)"
            npm install
            npm run build

      - save_cache:
          paths: [node_modules]
          key: build-cache
      - save_cache:
          paths: [dist]
          key: dist-cache

  lint-test-app:
    executor: nodejs-executor
    steps:
      - checkout
      - restore_cache:
          keys: [build-cache]
      - run:
          name: Run app audit
          command: |
            echo =========== Run audit ==================================
            npm audit --audit-level=critical
      - run:
          name: Run app lint check
          command: |   
            echo =========== Run Lint ==================================
            npm run lint
      - run:
          name: Run app Test
          command: |   
            echo =========== Run Test ==================================
            npm run test

  build-docker:
    executor: docker/docker
    environment:
      DOCKER_IMAGE: devops-capstone
      DOCKER_TAG: build-${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          keys: [dist-cache]
      - docker/check:
          docker-username: DOCKER_USER
          docker-password: DOCKER_PASSWORD

      - docker/build:
          image: $DOCKER_USER/$DOCKER_IMAGE
          tag: $DOCKER_TAG

      - docker/push:
          digest-path: /tmp/digest.txt
          image: $DOCKER_USER/$DOCKER_IMAGE
          tag: $DOCKER_TAG

      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"

  deploy-eks:
    docker:
      - image: cimg/base:stable
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      docker-image-tag:
        description: |
          Name of the docker image to be deployed
        type: string
      version-info:
        description: |
          App version information
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: "us-east-1"

    steps:
      - checkout
      - kubernetes/install-kubectl
      - run:
          name: Install Dependencies
          command: |
            echo $(kubectl --version)
            echo $(aws --version)
            echo $(aws eks update-kubeconfig --region << parameters.aws-region >> --name << parameters.cluster-name >>)
            kubectl get pods
      - run:      
          name: Create deployment manifest
          command: |
            # Replace the placeholders in the manifest with the intended values.
            # This is to avoid hardcoding the image name in the manifest, to make this
            # demo project more portable.
            BUILD_DATE=$(date '+%Y%m%d%H%M%S')
            PREFIX="blue" 
            cat deployment/$PREFIX-deployment.yml.template |\
               sed "s|DOCKER_IMAGE_TAG|<< parameters.docker-image-tag >>|\
                g;s|BUILD_DATE_VALUE|$BUILD_DATE|g;s|VERSION_INFO_VALUE|\
                << parameters.version-info >>|g" > deployment/app-deployment.yaml

            cat deployment/app-deployment.yaml

      # - aws-eks/update-kubeconfig-with-authenticator:
      #     cluster-name: << parameters.cluster-name >>
      #     install-kubectl: true
      #     aws-region: << parameters.aws-region >>

      # - kubernetes/create-or-update-resource:
      #     resource-file-path: "deployment/app-deployment.yaml"
      #     get-rollout-status: true
      #     resource-name: deployment/$PREFIX-deploy

      # - kubernetes/create-or-update-resource:
      #     resource-file-path: "deployment/$PREFIX-svc.yaml"

workflows:
  default:
    jobs:
      # - build-app:
      #     context: slack-secrets
      # - lint-test-app:
      #     context: slack-secrets
      #     requires: [build-app]
      # - build-docker:
      #     context: slack-secrets
      #     requires: [lint-test-app]
      - deploy-eks:
          cluster-name: eksctl-demo
          aws-region: $AWS_DEFAULT_REGION
          docker-image-tag: "latest"
          version-info: "build-${CIRCLE_WORKFLOW_ID:0:7}"

